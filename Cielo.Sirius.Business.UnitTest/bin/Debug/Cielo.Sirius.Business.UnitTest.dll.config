<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
    <section name="cielo.sirius.configuration" type="Cielo.Sirius.Foundation.Configuration.MainConfigurationHandler, Cielo.Sirius.Foundation"/>
  </configSections>

  <appSettings>
    <add key="CRMUserCredentialKey" value="CRMUserCredentialKey"/>
    <add key="OSBCredKey" value="OSBCredentialKey"/>
    <add key="CRMOrganization" value="R3WP2"/>
    <add key="CRMUrl" value="http://localhost:5555/"/>
    <add key="Domain" value="CRM"/>
  </appSettings>

  <cielo.sirius.configuration>
    <dataAccessComponents>

      <dataAccess name="ConsultarInformacoesPatAleloDAO" parameterizedMock="true" mocked="true" mockSourceData="C:\Source\Mocks\ConsultarInformacoesPatAleloMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>


      <dataAccess name="SolicitarNegociacaoTaxaDAO" parameterizedMock="true" mocked="true" mockSourceData="C:\Source\Mocks\MockSolicitarNegociacaoTaxa.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarDetalheProdutoElegivelClienteDAO" mocked="false" mockSourceData="C:\Source\Mocks\MockConsultarDetalheProdutoElegivelClienteSegmentado.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarDetalheProdutoHabilitadoClienteDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockConsultarDetalheProdutoHabilitadoClientePadrao.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarDetalheProdutoNaoElegivelClienteDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockConsultarDetalheProdutoNaoElegivelClienteSegmentado.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarProdutoElegivelClienteDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockConsultarProdutoElegivelCliente.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarProdutoHabilitadoClienteDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockConsultarProdutoHabilitadoCliente.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarProdutoNaoElegivelClienteDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockConsultarProdutoNaoElegivelCliente.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="ConsultarPrazoPadraoDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockConsultarPrazoPadrao.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="SolicitarExclusaoProdutoDAO" parameterizedMock="true" mocked="true" mockSourceData="C:\Source\Mocks\SolicitarExclusaoProdutoMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ExistsProductOpenDemandDAO" mocked="false" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockExistsProductOpenDemand.xml">
        <parameters>
          <add key="url" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="GetProductRequestsHistoryDAO" mocked="false" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockGetProductRequestsHistory.xml">
        <parameters>
          <add key="url" value="" />
        </parameters>
      </dataAccess>
      <dataAccess name="GetServiceRequestsHistoryDAO" mocked="true" mockSourceData="C:\Source\Mocks\MockGetServiceRequestsHistory.xml">
        <parameters>
          <add key="url" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="GetProductRequestTypesDAO"  mockSourceData="C:\Source\Mocks\MockGetProductRequestTypes.xml">
        <parameters>
          <add key="url" value="" />
        </parameters>
      </dataAccess>
      <!--<dataAccess name="GetDiscountRateRestrictionDAO" mocked="false" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockGetProductRequestTypes.xml">
        <parameters>
          <add key="url" value="" />
        </parameters>
      </dataAccess>-->
      <dataAccess name="ManterPrazoFlexivelDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockManterPrazoFlexivel.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ConsultarServicoHabilitadoClienteDAO" mocked="true" parameterizedMock="false" mockSourceData="C:\Source\Mocks\ConsultarServicoHabilitadoClienteMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ConsultarServicoElegivelClienteDAO" mocked="true" parameterizedMock="false" mockSourceData="C:\Source\Mocks\MockConsultarServicoElegivelClienteMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ConsultarServicoNaoElegivelClienteDAO" mocked="true" parameterizedMock="false" mockSourceData="C:\Source\Mocks\MockConsultarServicoNaoElegivelClienteMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ConsultarDetalheProdutoMultivanContratadoClienteDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockConsultarDetalheProdutoMultivanContratadoCliente.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="HabilitarDesabilitarVendaDigitadaDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\HabilitarDesabilitarVendaDigitadaMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="ValidarPermissaoVendaDigitadaDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockValidarPermissaoVendaDigitada.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="SolicitaAnaliseAlvaraDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockSolicitaAnaliseAlvara.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>

      <dataAccess name="HabilitarServicoDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockHabilitarServico.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
    
      <dataAccess name="DesabilitarServicoDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockDesabilitarServico.xml">
         <parameters>
           <add key="realm" value="" />
           <add key="credentialKey" value="" />
         </parameters>
       </dataAccess>
      <dataAccess name="ConsultarPrazosTaxasPrazoFlexivelDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\MockConsultarPrazosTaxasPrazoFlexivel.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
    
  <dataAccess name="HabilitarProdutoDAO" mocked="true" parameterizedMock="true" mockSourceData="C:\Source\Mocks\HabilitarProdutoMock.xml">
        <parameters>
          <add key="realm" value="" />
          <add key="credentialKey" value="" />
        </parameters>
      </dataAccess>
    </dataAccessComponents>
  </cielo.sirius.configuration>

   
  
  
  <system.diagnostics>
    <sources>
      <source propagateActivity="true" name="System.ServiceModel" switchValue="Warning,ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="C:\Source\Cielo-Scrum\Referencia\Cielo.USD\Cielo.Sirius.Integration.OutboundService\Web_tracelog.svclog"
        type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
  </system.diagnostics>

  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5"/>
  </system.web>

  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="CieloOSBProdutoSOAPBinding" />
        <binding name="ServicoSOAP" />
      </basicHttpBinding>
      <wsHttpBinding>
        <binding name="wsHttpEndpointBinding">
          <security mode="Transport">
            <transport clientCredentialType="Windows" />
          </security>
        </binding>
        <binding name="wsHttpEndpointBinding_IProdutosService" />
      </wsHttpBinding>
    </bindings>
    <services>
      <service name="Cielo.Sirius.Integration.OutboundService.ProdutosService">
        <endpoint binding="wsHttpBinding" bindingConfiguration="" bindingName="wsHttpEndpointBinding"
          contract="Cielo.Sirius.Integration.OutboundService.IProdutosService" />
      </service>
    </services>
    <client>
      <endpoint address="http://osb-cielo.cloudapp.net/cadastro/produto/produto/v3"
        binding="basicHttpBinding" bindingConfiguration="CieloOSBProdutoSOAPBinding"
        contract="ProdutoService.Produto1" name="ProdutoSOAP" />
      <endpoint address="http://osb-cielo.cloudapp.net/cadastro/servico/servico/v1"
        binding="basicHttpBinding" bindingConfiguration="ServicoSOAP"
        contract="ServicoService.Servico1" name="ServicoSOAP" />
      <endpoint address="http://localhost:52893/ProdutosService.svc"
        binding="wsHttpBinding" bindingConfiguration="wsHttpEndpointBinding_IProdutosService"
        contract="WCFService.IProdutosService" name="wsHttpEndpointBinding_IProdutosService">
        <identity>
          <userPrincipalName value="administrator@crm.avanade.local" />
        </identity>
      </endpoint>
    </client>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
        <behavior name="DebugBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <protocolMapping>
      <add scheme="https" binding="wsHttpBinding" />
    </protocolMapping>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>


  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true"/>
  </system.webServer>

  <nlog autoReload="true">
    <variable name="logDir" value="${basedir}/logs" />
    <targets>
      <target name="file" type="File" filename="${logDir}/Cielo.Sirius.Integration.OutboundService.txt" />
    </targets>
    <rules>
      <!-- Off, Fatal, Error, Warn, Info, Debug, Trace -->
      <logger name="*" level="Trace" writeTo="file" />
    </rules>
  </nlog>

</configuration>